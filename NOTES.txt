Spatial statistics: extract spatial distribution from real data
https://automating-gis-processes.github.io/2016/Lesson2-geopandas-basics.html
https://towardsdatascience.com/getting-started-with-geographic-data-science-in-python-part-3-ddf55130840b

VRP code reference:
https://developers.google.com/optimization/routing/vrp

Simulate data: given distribution simulate client arrivals, demands and their time-windows in days (4-5 days)

Optimization problem:
    Calculate Euclidean distances between client
        - maybe some couples of distances can be not saved if they are too high
        - fill in adjacency matrix -> start with a symmetric one
    Select which customer to serve
        - 300 new customers per day -> OK
        - max number of deliveries to respect capacity constraint and time constraint -> capacity constraint OK
        - look at probability of other near customers in future
        - Each customer has demand expressed in: m^3, set up time (related to set up cost), kg, available day -> OK
    Solve VRP for those customers
        - objectives: mean distances, stoking times
        - beware the set-up times, fixed costs
        - capacity and time constraint
        - fixed number of available vehicles (50-60 vehicles)

TO DO:
2_ Improve VRP (WIP):
    - set maximum time for search -> done (30s)
    - set maximum number of costumer per vehicle -> done
    - set maximum lenght of each route -> done
    - set capacity constraint -> done
    - set time constraint -> donw: I'm assuming vehicles with 60km/h velocities
    - objective function -> minimize total travel and set up times and number of vehicles
3_ Work on num_deliveries


VRPH, version 1.0
Copyright 2010 Chris Groer
Distributed under Common Public License 1.0

Usage: vrp_ej.exe -f vrp_file -j num_ejected -t num_trials -m method [-s sol_file -out out_file -n num_heur_sols -v]
         num_ejected should be something less than 20 or so
         num_trials can be fairly large as the procedure is fast (say 1000)
         method must be 0 (RANDOM search), 1 (REGRET search)
         Options:
         Can start with a solution in sol_file or it will generate an initial
            solution for you
         Can write the final best solution discovered to out_file
         Adding -v will print verbose output

